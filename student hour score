import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

child_dataset = pd.read_excel('/content/data1.xlsx')

child_dataset

from sklearn.model_selection import train_test_split

X = child_dataset[['Hours_Studied']]
Y = child_dataset['Exam_Score']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

X_test

Y_train

Y_test

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,Y_train)

predictions = lm.predict(X_test)

predictions

plt.scatter(X['Hours_Studied'],Y)
plt.xlabel('Hours Studied')
plt.ylabel('Exam Score')
plt.title('Exam Score vs Hours Studied')
plt.show()

print(lm.intercept_)

print(lm.coef_)

# Recalculate yy using the current X and the model's intercept and coefficient for 'Hours_Studied'
# Assuming 'Hours_Studied' is the first feature in X
yy = lm.intercept_ + lm.coef_[0] * X['Hours_Studied']
round(yy,0)

# Plot the original data points for 'Hours_Studied' vs 'Exam_Score'
plt.scatter(X['Hours_Studied'], Y)

# Plot the fitted regression line
plt.plot(X['Hours_Studied'], yy, 'r')

# Plot the test data points and their predictions
plt.scatter(X_test['Hours_Studied'], predictions)

plt.xlabel('Hours Studied')
plt.ylabel('Exam Score')
plt.title('Exam Score vs Hours Studied with Test Predictions and Fitted Line')
plt.show()

print(Y_test)
print(predictions)

from sklearn.metrics import mean_absolute_error

mean_absolute_error(Y_test, predictions)

y_true = [82, 77]
y_pred = [82, 77]
mean_absolute_error(y_true, y_pred)

y_true = [82, 78]
y_pred = [81, 77]
mean_absolute_error(y_true, y_pred)

from sklearn.metrics import mean_squared_error
y_true = [82, 78]
y_pred = [81, 77]
mean_squared_error(y_true, y_pred)

rmse = mean_squared_error(y_true, y_pred)
rmse = np.sqrt(rmse)
rmse

from sklearn.metrics import mean_absolute_error
y_true = [82, 70]
y_pred = [81, 77]
mean_absolute_error(y_true, y_pred)

from sklearn.metrics import r2_score

#Perfect match of y and f
y =[10, 20, 30]
f =[10, 20, 30]
r2 = r2_score(y, f)
print('r2 score for perfect model is', r2)

### Assume y is the actual value and f is the predicted values
# y and f not matched, only one value matched
y =[10, 20, 30]
f =[20, 20, 20]
r2 = r2_score(y, f)
print('r2 score for a model which predicts mean value always is', r2)

# y and f not at all matched
y =[10, 20, 30]
f =[20, 10, 20]
r2 = r2_score(y, f)
print('r2 score for a model which predicts mean value always is', r2)

y_true = [82, 78]
y_pred = [81.5, 77.5]
r2 = r2_score(y_true, y_pred)
print('r2 score for perfect model is', r2)
